{"ast":null,"code":"var _jsxFileName = \"C:\\\\Jean\\\\Scolarite\\\\NUS\\\\SoC\\\\Data_vizualisation\\\\Assignement_2\\\\assignement2-app\\\\src\\\\Components\\\\BarRace.jsx\",\n  _s = $RefreshSig$();\n/*\r\nchart = {\r\n    replay;\r\n  \r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto;\");\r\n  \r\n    const updateBars = bars(svg);\r\n    const updateAxis = axis(svg);\r\n    const updateLabels = labels(svg);\r\n    const updateTicker = ticker(svg);\r\n  \r\n    yield svg.node();\r\n  \r\n    for (const keyframe of keyframes) {\r\n      const transition = svg.transition()\r\n          .duration(duration)\r\n          .ease(d3.easeLinear);\r\n  \r\n      // Extract the top bar’s value.\r\n      x.domain([0, keyframe[1][0].value]);\r\n  \r\n      updateAxis(keyframe, transition);\r\n      updateBars(keyframe, transition);\r\n      updateLabels(keyframe, transition);\r\n      updateTicker(keyframe, transition);\r\n  \r\n      invalidation.then(() => svg.interrupt());\r\n      await transition.end();\r\n    }\r\n  }\r\n\r\nduration = 250\r\nn = 12\r\nnames = new Set(data.map(d => d.name))\r\ndatevalues = Array.from(d3.rollup(data, ([d]) => d.value, d => +d.date, d => d.name))\r\n.map(([date, data]) => [new Date(date), data])\r\n.sort(([a], [b]) => d3.ascending(a, b))\r\n\r\n\r\nfunction rank(value) {\r\nconst data = Array.from(names, name => ({name, value: value(name)}));\r\ndata.sort((a, b) => d3.descending(a.value, b.value));\r\nfor (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);\r\nreturn data;\r\n}\r\n\r\nk = 10\r\n\r\nkeyframes = {\r\nconst keyframes = [];\r\nlet ka, a, kb, b;\r\nfor ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\r\n    for (let i = 0; i < k; ++i) {\r\n    const t = i / k;\r\n    keyframes.push([\r\n        new Date(ka * (1 - t) + kb * t),\r\n        rank(name => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t)\r\n    ]);\r\n    }\r\n}\r\nkeyframes.push([new Date(kb), rank(name => b.get(name) || 0)]);\r\nreturn keyframes;\r\n}\r\n\r\nnameframes = d3.groups(keyframes.flatMap(([, data]) => data), d => d.name)\r\n\r\nprev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])))\r\n\r\nnext = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)))\r\n\r\nfunction bars(svg) {\r\nlet bar = svg.append(\"g\")\r\n    .attr(\"fill-opacity\", 0.6)\r\n    .selectAll(\"rect\");\r\n\r\nreturn ([date, data], transition) => bar = bar\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"rect\")\r\n        .attr(\"fill\", color)\r\n        .attr(\"height\", y.bandwidth())\r\n        .attr(\"x\", x(0))\r\n        .attr(\"y\", d => y((prev.get(d) || d).rank))\r\n        .attr(\"width\", d => x((prev.get(d) || d).value) - x(0)),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"y\", d => y((next.get(d) || d).rank))\r\n        .attr(\"width\", d => x((next.get(d) || d).value) - x(0))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"y\", d => y(d.rank))\r\n    .attr(\"width\", d => x(d.value) - x(0)));\r\n}\r\n\r\nfunction labels(svg) {\r\nlet label = svg.append(\"g\")\r\n    .style(\"font\", \"bold 12px var(--sans-serif)\")\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .selectAll(\"text\");\r\n\r\nreturn ([date, data], transition) => label = label\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"text\")\r\n        .attr(\"transform\", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)\r\n        .attr(\"y\", y.bandwidth() / 2)\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"-0.25em\")\r\n        .text(d => d.name)\r\n        .call(text => text.append(\"tspan\")\r\n        .attr(\"fill-opacity\", 0.7)\r\n        .attr(\"font-weight\", \"normal\")\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"1.15em\")),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"transform\", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)\r\n        .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.value, (next.get(d) || d).value)))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`)\r\n    .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).value, d.value))));\r\n}\r\n\r\nfunction textTween(a, b) {\r\nconst i = d3.interpolateNumber(a, b);\r\nreturn function(t) {\r\n    this.textContent = formatNumber(i(t));\r\n};\r\n}\r\n\r\nformatNumber = d3.format(\",d\")\r\n\r\ntickFormat = undefined // override as desired\r\n\r\nfunction axis(svg) {\r\nconst g = svg.append(\"g\")\r\n    .attr(\"transform\", `translate(0,${marginTop})`);\r\n\r\nconst axis = d3.axisTop(x)\r\n    .ticks(width / 160, tickFormat)\r\n    .tickSizeOuter(0)\r\n    .tickSizeInner(-barSize * (n + y.padding()));\r\n\r\nreturn (_, transition) => {\r\n    g.transition(transition).call(axis);\r\n    g.select(\".tick:first-of-type text\").remove();\r\n    g.selectAll(\".tick:not(:first-of-type) line\").attr(\"stroke\", \"white\");\r\n    g.select(\".domain\").remove();\r\n};\r\n}\r\n\r\nfunction ticker(svg) {\r\nconst now = svg.append(\"text\")\r\n    .style(\"font\", `bold ${barSize}px var(--sans-serif)`)\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"x\", width - 6)\r\n    .attr(\"y\", marginTop + barSize * (n - 0.45))\r\n    .attr(\"dy\", \"0.32em\")\r\n    .text(formatDate(keyframes[0][0]));\r\n\r\nreturn ([date], transition) => {\r\n    transition.end().then(() => now.text(formatDate(date)));\r\n};\r\n}\r\n\r\nformatDate = d3.utcFormat(\"%Y\")\r\n\r\ncolor = {\r\n    const scale = d3.scaleOrdinal(d3.schemeTableau10);\r\n    if (data.some(d => d.category !== undefined)) {\r\n        const categoryByName = new Map(data.map(d => [d.name, d.category]))\r\n        scale.domain(categoryByName.values());\r\n        return d => scale(categoryByName.get(d.name));\r\n    }\r\n    return d => scale(d.name);\r\n}\r\n\r\nx = d3.scaleLinear([0, 1], [marginLeft, width - marginRight])\r\n\r\ny = d3.scaleBand()\r\n.domain(d3.range(n + 1))\r\n.rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)])\r\n.padding(0.1)\r\n\r\nheight = marginTop + barSize * n + marginBottom\r\n\r\nbarSize = 48\r\nmarginTop = 16\r\nmarginRight = 6\r\nmarginBottom = 6\r\nmarginLeft = 0\r\n*/\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarRace = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  const width = 800;\n  const height = 600;\n  const barSize = 48;\n  const n = 12;\n  const duration = 250;\n\n  // Configuration des échelles et de la marge\n  const marginTop = 16;\n  const marginBottom = 6;\n  const marginLeft = 0;\n  const marginRight = 6;\n  const x = d3.scaleLinear().domain([0, 1]).range([marginLeft, width - marginRight]);\n  const y = d3.scaleBand().domain(d3.range(n + 1)).rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)]).padding(0.1);\n  const colorScale = d3.scaleOrdinal(d3.schemeTableau10);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.attr(\"viewBox\", [0, 0, width, height]).attr(\"width\", width).attr(\"height\", height);\n    const updateBars = (data, transition) => {\n      const bars = svg.selectAll(\"rect\").data(data, d => d.name);\n      bars.join(enter => enter.append(\"rect\").attr(\"x\", x(0)).attr(\"y\", d => y(d.rank)).attr(\"width\", d => x(d.value) - x(0)).attr(\"height\", y.bandwidth()).attr(\"fill\", d => colorScale(d.name)), update => update, exit => exit.transition(transition).remove()).transition(transition).attr(\"y\", d => y(d.rank)).attr(\"width\", d => x(d.value) - x(0));\n    };\n    const transition = svg.transition().duration(duration).ease(d3.easeLinear);\n    updateBars(data.slice(0, n), transition);\n  }, [data, x, y]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(BarRace, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = BarRace;\nexport default BarRace;\nvar _c;\n$RefreshReg$(_c, \"BarRace\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","BarRace","data","_s","svgRef","width","height","barSize","n","duration","marginTop","marginBottom","marginLeft","marginRight","x","scaleLinear","domain","range","y","scaleBand","rangeRound","padding","colorScale","scaleOrdinal","schemeTableau10","svg","select","current","attr","updateBars","transition","bars","selectAll","d","name","join","enter","append","rank","value","bandwidth","update","exit","remove","ease","easeLinear","slice","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Jean/Scolarite/NUS/SoC/Data_vizualisation/Assignement_2/assignement2-app/src/Components/BarRace.jsx"],"sourcesContent":["/*\r\nchart = {\r\n    replay;\r\n  \r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto;\");\r\n  \r\n    const updateBars = bars(svg);\r\n    const updateAxis = axis(svg);\r\n    const updateLabels = labels(svg);\r\n    const updateTicker = ticker(svg);\r\n  \r\n    yield svg.node();\r\n  \r\n    for (const keyframe of keyframes) {\r\n      const transition = svg.transition()\r\n          .duration(duration)\r\n          .ease(d3.easeLinear);\r\n  \r\n      // Extract the top bar’s value.\r\n      x.domain([0, keyframe[1][0].value]);\r\n  \r\n      updateAxis(keyframe, transition);\r\n      updateBars(keyframe, transition);\r\n      updateLabels(keyframe, transition);\r\n      updateTicker(keyframe, transition);\r\n  \r\n      invalidation.then(() => svg.interrupt());\r\n      await transition.end();\r\n    }\r\n  }\r\n\r\nduration = 250\r\nn = 12\r\nnames = new Set(data.map(d => d.name))\r\ndatevalues = Array.from(d3.rollup(data, ([d]) => d.value, d => +d.date, d => d.name))\r\n.map(([date, data]) => [new Date(date), data])\r\n.sort(([a], [b]) => d3.ascending(a, b))\r\n\r\n\r\nfunction rank(value) {\r\nconst data = Array.from(names, name => ({name, value: value(name)}));\r\ndata.sort((a, b) => d3.descending(a.value, b.value));\r\nfor (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);\r\nreturn data;\r\n}\r\n\r\nk = 10\r\n\r\nkeyframes = {\r\nconst keyframes = [];\r\nlet ka, a, kb, b;\r\nfor ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\r\n    for (let i = 0; i < k; ++i) {\r\n    const t = i / k;\r\n    keyframes.push([\r\n        new Date(ka * (1 - t) + kb * t),\r\n        rank(name => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t)\r\n    ]);\r\n    }\r\n}\r\nkeyframes.push([new Date(kb), rank(name => b.get(name) || 0)]);\r\nreturn keyframes;\r\n}\r\n\r\nnameframes = d3.groups(keyframes.flatMap(([, data]) => data), d => d.name)\r\n\r\nprev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])))\r\n\r\nnext = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)))\r\n\r\nfunction bars(svg) {\r\nlet bar = svg.append(\"g\")\r\n    .attr(\"fill-opacity\", 0.6)\r\n    .selectAll(\"rect\");\r\n\r\nreturn ([date, data], transition) => bar = bar\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"rect\")\r\n        .attr(\"fill\", color)\r\n        .attr(\"height\", y.bandwidth())\r\n        .attr(\"x\", x(0))\r\n        .attr(\"y\", d => y((prev.get(d) || d).rank))\r\n        .attr(\"width\", d => x((prev.get(d) || d).value) - x(0)),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"y\", d => y((next.get(d) || d).rank))\r\n        .attr(\"width\", d => x((next.get(d) || d).value) - x(0))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"y\", d => y(d.rank))\r\n    .attr(\"width\", d => x(d.value) - x(0)));\r\n}\r\n\r\nfunction labels(svg) {\r\nlet label = svg.append(\"g\")\r\n    .style(\"font\", \"bold 12px var(--sans-serif)\")\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .selectAll(\"text\");\r\n\r\nreturn ([date, data], transition) => label = label\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"text\")\r\n        .attr(\"transform\", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)\r\n        .attr(\"y\", y.bandwidth() / 2)\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"-0.25em\")\r\n        .text(d => d.name)\r\n        .call(text => text.append(\"tspan\")\r\n        .attr(\"fill-opacity\", 0.7)\r\n        .attr(\"font-weight\", \"normal\")\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"1.15em\")),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"transform\", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)\r\n        .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.value, (next.get(d) || d).value)))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`)\r\n    .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).value, d.value))));\r\n}\r\n\r\nfunction textTween(a, b) {\r\nconst i = d3.interpolateNumber(a, b);\r\nreturn function(t) {\r\n    this.textContent = formatNumber(i(t));\r\n};\r\n}\r\n\r\nformatNumber = d3.format(\",d\")\r\n\r\ntickFormat = undefined // override as desired\r\n\r\nfunction axis(svg) {\r\nconst g = svg.append(\"g\")\r\n    .attr(\"transform\", `translate(0,${marginTop})`);\r\n\r\nconst axis = d3.axisTop(x)\r\n    .ticks(width / 160, tickFormat)\r\n    .tickSizeOuter(0)\r\n    .tickSizeInner(-barSize * (n + y.padding()));\r\n\r\nreturn (_, transition) => {\r\n    g.transition(transition).call(axis);\r\n    g.select(\".tick:first-of-type text\").remove();\r\n    g.selectAll(\".tick:not(:first-of-type) line\").attr(\"stroke\", \"white\");\r\n    g.select(\".domain\").remove();\r\n};\r\n}\r\n\r\nfunction ticker(svg) {\r\nconst now = svg.append(\"text\")\r\n    .style(\"font\", `bold ${barSize}px var(--sans-serif)`)\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"x\", width - 6)\r\n    .attr(\"y\", marginTop + barSize * (n - 0.45))\r\n    .attr(\"dy\", \"0.32em\")\r\n    .text(formatDate(keyframes[0][0]));\r\n\r\nreturn ([date], transition) => {\r\n    transition.end().then(() => now.text(formatDate(date)));\r\n};\r\n}\r\n\r\nformatDate = d3.utcFormat(\"%Y\")\r\n\r\ncolor = {\r\n    const scale = d3.scaleOrdinal(d3.schemeTableau10);\r\n    if (data.some(d => d.category !== undefined)) {\r\n        const categoryByName = new Map(data.map(d => [d.name, d.category]))\r\n        scale.domain(categoryByName.values());\r\n        return d => scale(categoryByName.get(d.name));\r\n    }\r\n    return d => scale(d.name);\r\n}\r\n\r\nx = d3.scaleLinear([0, 1], [marginLeft, width - marginRight])\r\n\r\ny = d3.scaleBand()\r\n.domain(d3.range(n + 1))\r\n.rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)])\r\n.padding(0.1)\r\n\r\nheight = marginTop + barSize * n + marginBottom\r\n\r\nbarSize = 48\r\nmarginTop = 16\r\nmarginRight = 6\r\nmarginBottom = 6\r\nmarginLeft = 0\r\n*/\r\n\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst BarRace = ({ data }) => {\r\n  const svgRef = useRef();\r\n  const width = 800;\r\n  const height = 600;\r\n  const barSize = 48;\r\n  const n = 12;\r\n  const duration = 250;\r\n\r\n  // Configuration des échelles et de la marge\r\n  const marginTop = 16;\r\n  const marginBottom = 6;\r\n  const marginLeft = 0;\r\n  const marginRight = 6;\r\n  const x = d3.scaleLinear().domain([0, 1]).range([marginLeft, width - marginRight]);\r\n  const y = d3\r\n    .scaleBand()\r\n    .domain(d3.range(n + 1))\r\n    .rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)])\r\n    .padding(0.1);\r\n\r\n  const colorScale = d3.scaleOrdinal(d3.schemeTableau10);\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.attr(\"viewBox\", [0, 0, width, height]).attr(\"width\", width).attr(\"height\", height);\r\n\r\n    const updateBars = (data, transition) => {\r\n      const bars = svg.selectAll(\"rect\").data(data, (d) => d.name);\r\n      bars\r\n        .join(\r\n          (enter) =>\r\n            enter\r\n              .append(\"rect\")\r\n              .attr(\"x\", x(0))\r\n              .attr(\"y\", (d) => y(d.rank))\r\n              .attr(\"width\", (d) => x(d.value) - x(0))\r\n              .attr(\"height\", y.bandwidth())\r\n              .attr(\"fill\", (d) => colorScale(d.name)),\r\n          (update) => update,\r\n          (exit) => exit.transition(transition).remove()\r\n        )\r\n        .transition(transition)\r\n        .attr(\"y\", (d) => y(d.rank))\r\n        .attr(\"width\", (d) => x(d.value) - x(0));\r\n    };\r\n\r\n    const transition = svg.transition().duration(duration).ease(d3.easeLinear);\r\n    updateBars(data.slice(0, n), transition);\r\n  }, [data, x, y]);\r\n\r\n  return (\r\n    <svg ref={svgRef}>\r\n      {/* Les barres et axes seront ajoutés ici par D3 */}\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default BarRace;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}