{"ast":null,"code":"var _jsxFileName = \"C:\\\\Jean\\\\Scolarite\\\\NUS\\\\SoC\\\\Data_vizualisation\\\\Assignement_2\\\\assignement2-app\\\\src\\\\Components\\\\BarRace.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\n//import data from \"../assets/category-brands.csv\";\nimport * as d3 from \"d3\";\nimport data from \"../assets/barRace1.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateKeyframes = () => {\n  const data = [{\n    name: \"A\",\n    value: Math.random() * 100\n  }, {\n    name: \"B\",\n    value: Math.random() * 100\n  }, {\n    name: \"C\",\n    value: Math.random() * 100\n  }, {\n    name: \"D\",\n    value: Math.random() * 100\n  }];\n\n  // Générer des keyframes avec classement dynamique\n  const keyframes = Array.from({\n    length: 20\n  }, (_, i) => {\n    // Augmenter les valeurs de manière aléatoire\n    const updatedData = data.map(d => ({\n      ...d,\n      value: d.value + Math.random() * 10\n    }));\n\n    // Classer les données par valeur décroissante et leur attribuer un rang\n    const rankedData = updatedData.sort((a, b) => b.value - a.value).map((d, index) => ({\n      ...d,\n      rank: index\n    }));\n    return [`2025-03-${i + 1}`, rankedData]; // Keyframe : date + données classées\n  });\n  return keyframes;\n};\nconst BarRace = ({\n  duration = 250,\n  width = 800,\n  height = 600,\n  n = 12\n}) => {\n  _s();\n  const keyframes = data; //generateKeyframes();\n  //const keyframes = generateKeyframes();\n  console.log(keyframes);\n  const svgRef = useRef();\n  const [replay, setReplay] = useState(false); // État pour gérer le replay\n  const barSize = 48;\n  const marginTop = 16;\n  const marginBottom = 6;\n  const marginLeft = 0;\n  const marginRight = 6;\n  console.log(\"n : \", n);\n  const x = d3.scaleLinear([0, 1], [marginLeft, width - marginRight]);\n  const y = d3.scaleBand().domain(d3.range(n)).rangeRound([marginTop, marginTop + barSize * n]).padding(0.1);\n  const colorScale = d3.scaleOrdinal(d3.schemeTableau10);\n  const replayAnimation = () => {\n    setReplay(false);\n    setTimeout(() => setReplay(true), 0); // Redémarrer l'animation en modifiant l'état\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove(); // Réinitialiser SVG à chaque redémarrage\n    svg.attr(\"viewBox\", [0, 0, width, height]).attr(\"width\", width).attr(\"height\", height);\n    const gBars = svg.append(\"g\").attr(\"fill-opacity\", 1);\n    const gLabels = svg.append(\"g\").attr(\"text-anchor\", \"end\");\n    const gTicker = svg.append(\"text\").attr(\"x\", width - 6).attr(\"y\", marginTop).style(\"font\", `bold ${barSize}px sans-serif`);\n    const updateBars = (data, transition) => {\n      const bars = gBars.selectAll(\"rect\").data(data, d => d.name);\n      bars.join(enter => enter.append(\"rect\").attr(\"fill\", d => colorScale(d.name)).attr(\"x\", x(0)).attr(\"y\", d => y(d.rank)).attr(\"height\", y.bandwidth()).attr(\"width\", d => x(d.value) - x(0)), update => update, exit => exit.transition(transition).attr(\"width\", 0).remove()).call(bar => bar.transition(transition).attr(\"y\", d => y(d.rank)) // Mise à jour correcte de la position verticale\n      .attr(\"width\", d => x(d.value) - x(0)));\n    };\n    const updateLabels = (data, transition) => {\n      const labels = gLabels.selectAll(\"text\").data(data, d => d.name);\n      labels.join(enter => enter.append(\"text\").attr(\"x\", -6).attr(\"y\", d => y(d.rank) + y.bandwidth() / 2).attr(\"dy\", \"0.35em\").text(d => d.name), update => update, exit => exit.transition(transition).attr(\"opacity\", 0).remove()).call(label => label.transition(transition).attr(\"y\", d => y(d.rank) + y.bandwidth() / 2) // Mise à jour correcte de l'emplacement\n      );\n    };\n    const updateTicker = (date, transition) => {\n      gTicker.transition(transition).text(date);\n    };\n    (async function animateChart() {\n      console.log(\"keyframes : \", keyframes);\n      for (let i = 0; i < length(keyframes); i++) {\n        console.log(\"i : \", i);\n        //const transition = svg.transition().duration(duration).ease(d3.easeLinear);\n        //const date = elem.date;\n        //const data = elem.val;\n        //console.log(\"elem : \", elem);\n        /*\r\n        x.domain([0, d3.max(data, (d) => d.value)]);\r\n            updateBars(data, transition);\r\n        updateLabels(data, transition);\r\n        updateTicker(date, transition);\r\n            await transition.end();\r\n        */\n      }\n    })();\n  }, [keyframes, duration, replay, x, y, colorScale]); // Rejouer l'animation lorsqu'on change l'état replay\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: replayAnimation,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 7\n  }, this);\n};\n_s(BarRace, \"MmrHNShklPhzlheXlU4SHRhQdzY=\");\n_c = BarRace;\nexport default BarRace;\n\n/*\r\nchart = {\r\n    replay;\r\n  \r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto;\");\r\n  \r\n    const updateBars = bars(svg);\r\n    const updateAxis = axis(svg);\r\n    const updateLabels = labels(svg);\r\n    const updateTicker = ticker(svg);\r\n  \r\n    yield svg.node();\r\n  \r\n    for (const keyframe of keyframes) {\r\n      const transition = svg.transition()\r\n          .duration(duration)\r\n          .ease(d3.easeLinear);\r\n  \r\n      // Extract the top bar’s value.\r\n      x.domain([0, keyframe[1][0].value]);\r\n  \r\n      updateAxis(keyframe, transition);\r\n      updateBars(keyframe, transition);\r\n      updateLabels(keyframe, transition);\r\n      updateTicker(keyframe, transition);\r\n  \r\n      invalidation.then(() => svg.interrupt());\r\n      await transition.end();\r\n    }\r\n  }\r\n\r\nduration = 250\r\nn = 12\r\nnames = new Set(data.map(d => d.name))\r\ndatevalues = Array.from(d3.rollup(data, ([d]) => d.value, d => +d.date, d => d.name))\r\n.map(([date, data]) => [new Date(date), data])\r\n.sort(([a], [b]) => d3.ascending(a, b))\r\n\r\n\r\nfunction rank(value) {\r\nconst data = Array.from(names, name => ({name, value: value(name)}));\r\ndata.sort((a, b) => d3.descending(a.value, b.value));\r\nfor (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);\r\nreturn data;\r\n}\r\n\r\nk = 10\r\n\r\nkeyframes = {\r\nconst keyframes = [];\r\nlet ka, a, kb, b;\r\nfor ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\r\n    for (let i = 0; i < k; ++i) {\r\n    const t = i / k;\r\n    keyframes.push([\r\n        new Date(ka * (1 - t) + kb * t),\r\n        rank(name => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t)\r\n    ]);\r\n    }\r\n}\r\nkeyframes.push([new Date(kb), rank(name => b.get(name) || 0)]);\r\nreturn keyframes;\r\n}\r\n\r\nnameframes = d3.groups(keyframes.flatMap(([, data]) => data), d => d.name)\r\n\r\nprev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])))\r\n\r\nnext = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)))\r\n\r\nfunction bars(svg) {\r\nlet bar = svg.append(\"g\")\r\n    .attr(\"fill-opacity\", 0.6)\r\n    .selectAll(\"rect\");\r\n\r\nreturn ([date, data], transition) => bar = bar\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"rect\")\r\n        .attr(\"fill\", color)\r\n        .attr(\"height\", y.bandwidth())\r\n        .attr(\"x\", x(0))\r\n        .attr(\"y\", d => y((prev.get(d) || d).rank))\r\n        .attr(\"width\", d => x((prev.get(d) || d).value) - x(0)),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"y\", d => y((next.get(d) || d).rank))\r\n        .attr(\"width\", d => x((next.get(d) || d).value) - x(0))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"y\", d => y(d.rank))\r\n    .attr(\"width\", d => x(d.value) - x(0)));\r\n}\r\n\r\nfunction labels(svg) {\r\nlet label = svg.append(\"g\")\r\n    .style(\"font\", \"bold 12px var(--sans-serif)\")\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .selectAll(\"text\");\r\n\r\nreturn ([date, data], transition) => label = label\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"text\")\r\n        .attr(\"transform\", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)\r\n        .attr(\"y\", y.bandwidth() / 2)\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"-0.25em\")\r\n        .text(d => d.name)\r\n        .call(text => text.append(\"tspan\")\r\n        .attr(\"fill-opacity\", 0.7)\r\n        .attr(\"font-weight\", \"normal\")\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"1.15em\")),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"transform\", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)\r\n        .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.value, (next.get(d) || d).value)))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`)\r\n    .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).value, d.value))));\r\n}\r\n\r\nfunction textTween(a, b) {\r\nconst i = d3.interpolateNumber(a, b);\r\nreturn function(t) {\r\n    this.textContent = formatNumber(i(t));\r\n};\r\n}\r\n\r\nformatNumber = d3.format(\",d\")\r\n\r\ntickFormat = undefined // override as desired\r\n\r\nfunction axis(svg) {\r\nconst g = svg.append(\"g\")\r\n    .attr(\"transform\", `translate(0,${marginTop})`);\r\n\r\nconst axis = d3.axisTop(x)\r\n    .ticks(width / 160, tickFormat)\r\n    .tickSizeOuter(0)\r\n    .tickSizeInner(-barSize * (n + y.padding()));\r\n\r\nreturn (_, transition) => {\r\n    g.transition(transition).call(axis);\r\n    g.select(\".tick:first-of-type text\").remove();\r\n    g.selectAll(\".tick:not(:first-of-type) line\").attr(\"stroke\", \"white\");\r\n    g.select(\".domain\").remove();\r\n};\r\n}\r\n\r\nfunction ticker(svg) {\r\nconst now = svg.append(\"text\")\r\n    .style(\"font\", `bold ${barSize}px var(--sans-serif)`)\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"x\", width - 6)\r\n    .attr(\"y\", marginTop + barSize * (n - 0.45))\r\n    .attr(\"dy\", \"0.32em\")\r\n    .text(formatDate(keyframes[0][0]));\r\n\r\nreturn ([date], transition) => {\r\n    transition.end().then(() => now.text(formatDate(date)));\r\n};\r\n}\r\n\r\nformatDate = d3.utcFormat(\"%Y\")\r\n\r\ncolor = {\r\n    const scale = d3.scaleOrdinal(d3.schemeTableau10);\r\n    if (data.some(d => d.category !== undefined)) {\r\n        const categoryByName = new Map(data.map(d => [d.name, d.category]))\r\n        scale.domain(categoryByName.values());\r\n        return d => scale(categoryByName.get(d.name));\r\n    }\r\n    return d => scale(d.name);\r\n}\r\n\r\nx = d3.scaleLinear([0, 1], [marginLeft, width - marginRight])\r\n\r\ny = d3.scaleBand()\r\n.domain(d3.range(n + 1))\r\n.rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)])\r\n.padding(0.1)\r\n\r\nheight = marginTop + barSize * n + marginBottom\r\n\r\nbarSize = 48\r\nmarginTop = 16\r\nmarginRight = 6\r\nmarginBottom = 6\r\nmarginLeft = 0\r\n*/\nvar _c;\n$RefreshReg$(_c, \"BarRace\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","data","jsxDEV","_jsxDEV","generateKeyframes","name","value","Math","random","keyframes","Array","from","length","_","i","updatedData","map","d","rankedData","sort","a","b","index","rank","BarRace","duration","width","height","n","_s","console","log","svgRef","replay","setReplay","barSize","marginTop","marginBottom","marginLeft","marginRight","x","scaleLinear","y","scaleBand","domain","range","rangeRound","padding","colorScale","scaleOrdinal","schemeTableau10","replayAnimation","setTimeout","svg","select","current","selectAll","remove","attr","gBars","append","gLabels","gTicker","style","updateBars","transition","bars","join","enter","bandwidth","update","exit","call","bar","updateLabels","labels","text","label","updateTicker","date","animateChart","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Jean/Scolarite/NUS/SoC/Data_vizualisation/Assignement_2/assignement2-app/src/Components/BarRace.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n//import data from \"../assets/category-brands.csv\";\r\nimport * as d3 from \"d3\";\r\nimport data from \"../assets/barRace1.json\";\r\n\r\nconst generateKeyframes = () => {\r\n  const data = [\r\n    { name: \"A\", value: Math.random() * 100 },\r\n    { name: \"B\", value: Math.random() * 100 },\r\n    { name: \"C\", value: Math.random() * 100 },\r\n    { name: \"D\", value: Math.random() * 100 },\r\n  ];\r\n\r\n  // Générer des keyframes avec classement dynamique\r\n  const keyframes = Array.from({ length: 20 }, (_, i) => {\r\n    // Augmenter les valeurs de manière aléatoire\r\n    const updatedData = data.map((d) => ({ ...d, value: d.value + Math.random() * 10 }));\r\n\r\n    // Classer les données par valeur décroissante et leur attribuer un rang\r\n    const rankedData = updatedData\r\n      .sort((a, b) => b.value - a.value)\r\n      .map((d, index) => ({ ...d, rank: index }));\r\n\r\n    return [`2025-03-${i + 1}`, rankedData]; // Keyframe : date + données classées\r\n  });\r\n\r\n  return keyframes;\r\n};\r\n\r\n  \r\n  const BarRace = ({duration = 250, width = 800, height = 600, n = 12 }) => {\r\n    const keyframes = data;//generateKeyframes();\r\n    //const keyframes = generateKeyframes();\r\n    console.log(keyframes);\r\n    const svgRef = useRef();\r\n    const [replay, setReplay] = useState(false); // État pour gérer le replay\r\n    const barSize = 48;\r\n    const marginTop = 16;\r\n    const marginBottom = 6;\r\n    const marginLeft = 0;\r\n    const marginRight = 6;\r\n\r\n    console.log(\"n : \", n);\r\n  \r\n    const x = d3.scaleLinear([0, 1], [marginLeft, width - marginRight]);\r\n    const y = d3\r\n      .scaleBand()\r\n      .domain(d3.range(n))\r\n      .rangeRound([marginTop, marginTop + barSize * n])\r\n      .padding(0.1);\r\n  \r\n    const colorScale = d3.scaleOrdinal(d3.schemeTableau10);\r\n  \r\n    const replayAnimation = () => {\r\n      setReplay(false);\r\n      setTimeout(() => setReplay(true), 0); // Redémarrer l'animation en modifiant l'état\r\n    };\r\n  \r\n    useEffect(() => {\r\n      const svg = d3.select(svgRef.current);\r\n      svg.selectAll(\"*\").remove(); // Réinitialiser SVG à chaque redémarrage\r\n      svg\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n  \r\n      const gBars = svg.append(\"g\").attr(\"fill-opacity\", 1);\r\n      const gLabels = svg.append(\"g\").attr(\"text-anchor\", \"end\");\r\n      const gTicker = svg.append(\"text\").attr(\"x\", width - 6).attr(\"y\", marginTop).style(\"font\", `bold ${barSize}px sans-serif`);\r\n  \r\n      const updateBars = (data, transition) => {\r\n        const bars = gBars.selectAll(\"rect\").data(data, (d) => d.name);\r\n  \r\n        bars\r\n          .join(\r\n            (enter) =>\r\n              enter\r\n                .append(\"rect\")\r\n                .attr(\"fill\", (d) => colorScale(d.name))\r\n                .attr(\"x\", x(0))\r\n                .attr(\"y\", (d) => y(d.rank))\r\n                .attr(\"height\", y.bandwidth())\r\n                .attr(\"width\", (d) => x(d.value) - x(0)),\r\n            (update) => update,\r\n            (exit) => exit.transition(transition).attr(\"width\", 0).remove()\r\n          )\r\n          .call((bar) =>\r\n            bar\r\n              .transition(transition)\r\n              .attr(\"y\", (d) => y(d.rank)) // Mise à jour correcte de la position verticale\r\n              .attr(\"width\", (d) => x(d.value) - x(0))\r\n          );\r\n      };\r\n  \r\n      const updateLabels = (data, transition) => {\r\n        const labels = gLabels.selectAll(\"text\").data(data, (d) => d.name);\r\n  \r\n        labels\r\n          .join(\r\n            (enter) =>\r\n              enter\r\n                .append(\"text\")\r\n                .attr(\"x\", -6)\r\n                .attr(\"y\", (d) => y(d.rank) + y.bandwidth() / 2)\r\n                .attr(\"dy\", \"0.35em\")\r\n                .text((d) => d.name),\r\n            (update) => update,\r\n            (exit) => exit.transition(transition).attr(\"opacity\", 0).remove()\r\n          )\r\n          .call((label) =>\r\n            label\r\n              .transition(transition)\r\n              .attr(\"y\", (d) => y(d.rank) + y.bandwidth() / 2) // Mise à jour correcte de l'emplacement\r\n          );\r\n      };\r\n  \r\n      const updateTicker = (date, transition) => {\r\n        gTicker.transition(transition).text(date);\r\n      };\r\n\r\n      (async function animateChart() {\r\n        console.log(\"keyframes : \", keyframes);\r\n        for (let i = 0; i< length(keyframes);i++) {\r\n          console.log(\"i : \", i);\r\n          //const transition = svg.transition().duration(duration).ease(d3.easeLinear);\r\n          //const date = elem.date;\r\n          //const data = elem.val;\r\n          //console.log(\"elem : \", elem);\r\n          /*\r\n          x.domain([0, d3.max(data, (d) => d.value)]);\r\n  \r\n          updateBars(data, transition);\r\n          updateLabels(data, transition);\r\n          updateTicker(date, transition);\r\n  \r\n          await transition.end();\r\n          */\r\n        }\r\n      })();\r\n      \r\n    }, [keyframes, duration, replay, x, y, colorScale]); // Rejouer l'animation lorsqu'on change l'état replay\r\n  \r\n    return (\r\n      <div>\r\n        <button onClick={replayAnimation}>Replay</button> {/* Bouton Replay */}\r\n        <svg ref={svgRef}></svg>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default BarRace;\r\n\r\n\r\n/*\r\nchart = {\r\n    replay;\r\n  \r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto;\");\r\n  \r\n    const updateBars = bars(svg);\r\n    const updateAxis = axis(svg);\r\n    const updateLabels = labels(svg);\r\n    const updateTicker = ticker(svg);\r\n  \r\n    yield svg.node();\r\n  \r\n    for (const keyframe of keyframes) {\r\n      const transition = svg.transition()\r\n          .duration(duration)\r\n          .ease(d3.easeLinear);\r\n  \r\n      // Extract the top bar’s value.\r\n      x.domain([0, keyframe[1][0].value]);\r\n  \r\n      updateAxis(keyframe, transition);\r\n      updateBars(keyframe, transition);\r\n      updateLabels(keyframe, transition);\r\n      updateTicker(keyframe, transition);\r\n  \r\n      invalidation.then(() => svg.interrupt());\r\n      await transition.end();\r\n    }\r\n  }\r\n\r\nduration = 250\r\nn = 12\r\nnames = new Set(data.map(d => d.name))\r\ndatevalues = Array.from(d3.rollup(data, ([d]) => d.value, d => +d.date, d => d.name))\r\n.map(([date, data]) => [new Date(date), data])\r\n.sort(([a], [b]) => d3.ascending(a, b))\r\n\r\n\r\nfunction rank(value) {\r\nconst data = Array.from(names, name => ({name, value: value(name)}));\r\ndata.sort((a, b) => d3.descending(a.value, b.value));\r\nfor (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);\r\nreturn data;\r\n}\r\n\r\nk = 10\r\n\r\nkeyframes = {\r\nconst keyframes = [];\r\nlet ka, a, kb, b;\r\nfor ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\r\n    for (let i = 0; i < k; ++i) {\r\n    const t = i / k;\r\n    keyframes.push([\r\n        new Date(ka * (1 - t) + kb * t),\r\n        rank(name => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t)\r\n    ]);\r\n    }\r\n}\r\nkeyframes.push([new Date(kb), rank(name => b.get(name) || 0)]);\r\nreturn keyframes;\r\n}\r\n\r\nnameframes = d3.groups(keyframes.flatMap(([, data]) => data), d => d.name)\r\n\r\nprev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])))\r\n\r\nnext = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)))\r\n\r\nfunction bars(svg) {\r\nlet bar = svg.append(\"g\")\r\n    .attr(\"fill-opacity\", 0.6)\r\n    .selectAll(\"rect\");\r\n\r\nreturn ([date, data], transition) => bar = bar\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"rect\")\r\n        .attr(\"fill\", color)\r\n        .attr(\"height\", y.bandwidth())\r\n        .attr(\"x\", x(0))\r\n        .attr(\"y\", d => y((prev.get(d) || d).rank))\r\n        .attr(\"width\", d => x((prev.get(d) || d).value) - x(0)),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"y\", d => y((next.get(d) || d).rank))\r\n        .attr(\"width\", d => x((next.get(d) || d).value) - x(0))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"y\", d => y(d.rank))\r\n    .attr(\"width\", d => x(d.value) - x(0)));\r\n}\r\n\r\nfunction labels(svg) {\r\nlet label = svg.append(\"g\")\r\n    .style(\"font\", \"bold 12px var(--sans-serif)\")\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .selectAll(\"text\");\r\n\r\nreturn ([date, data], transition) => label = label\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"text\")\r\n        .attr(\"transform\", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)\r\n        .attr(\"y\", y.bandwidth() / 2)\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"-0.25em\")\r\n        .text(d => d.name)\r\n        .call(text => text.append(\"tspan\")\r\n        .attr(\"fill-opacity\", 0.7)\r\n        .attr(\"font-weight\", \"normal\")\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"1.15em\")),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"transform\", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)\r\n        .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.value, (next.get(d) || d).value)))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`)\r\n    .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).value, d.value))));\r\n}\r\n\r\nfunction textTween(a, b) {\r\nconst i = d3.interpolateNumber(a, b);\r\nreturn function(t) {\r\n    this.textContent = formatNumber(i(t));\r\n};\r\n}\r\n\r\nformatNumber = d3.format(\",d\")\r\n\r\ntickFormat = undefined // override as desired\r\n\r\nfunction axis(svg) {\r\nconst g = svg.append(\"g\")\r\n    .attr(\"transform\", `translate(0,${marginTop})`);\r\n\r\nconst axis = d3.axisTop(x)\r\n    .ticks(width / 160, tickFormat)\r\n    .tickSizeOuter(0)\r\n    .tickSizeInner(-barSize * (n + y.padding()));\r\n\r\nreturn (_, transition) => {\r\n    g.transition(transition).call(axis);\r\n    g.select(\".tick:first-of-type text\").remove();\r\n    g.selectAll(\".tick:not(:first-of-type) line\").attr(\"stroke\", \"white\");\r\n    g.select(\".domain\").remove();\r\n};\r\n}\r\n\r\nfunction ticker(svg) {\r\nconst now = svg.append(\"text\")\r\n    .style(\"font\", `bold ${barSize}px var(--sans-serif)`)\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"x\", width - 6)\r\n    .attr(\"y\", marginTop + barSize * (n - 0.45))\r\n    .attr(\"dy\", \"0.32em\")\r\n    .text(formatDate(keyframes[0][0]));\r\n\r\nreturn ([date], transition) => {\r\n    transition.end().then(() => now.text(formatDate(date)));\r\n};\r\n}\r\n\r\nformatDate = d3.utcFormat(\"%Y\")\r\n\r\ncolor = {\r\n    const scale = d3.scaleOrdinal(d3.schemeTableau10);\r\n    if (data.some(d => d.category !== undefined)) {\r\n        const categoryByName = new Map(data.map(d => [d.name, d.category]))\r\n        scale.domain(categoryByName.values());\r\n        return d => scale(categoryByName.get(d.name));\r\n    }\r\n    return d => scale(d.name);\r\n}\r\n\r\nx = d3.scaleLinear([0, 1], [marginLeft, width - marginRight])\r\n\r\ny = d3.scaleBand()\r\n.domain(d3.range(n + 1))\r\n.rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)])\r\n.padding(0.1)\r\n\r\nheight = marginTop + barSize * n + marginBottom\r\n\r\nbarSize = 48\r\nmarginTop = 16\r\nmarginRight = 6\r\nmarginBottom = 6\r\nmarginLeft = 0\r\n*/\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}