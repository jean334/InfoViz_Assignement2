{"ast":null,"code":"var _jsxFileName = \"C:\\\\Jean\\\\Scolarite\\\\NUS\\\\SoC\\\\Data_vizualisation\\\\Assignement_2\\\\assignement2-app\\\\src\\\\Components\\\\TreeMap.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport data from \"../assets/flare.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TreeMap({\n  selectedGroups\n}) {\n  if (!data) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading viz...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(GraphVisualization, {\n    data: data,\n    selectedGroups: selectedGroups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n}\n_c = TreeMap;\nfunction GraphVisualization({\n  data,\n  selectedGroups\n}) {\n  _s();\n  useEffect(() => {\n    d3.select(\"#tree-container\").select(\"svg\").remove();\n    const width = 1154;\n    const height = 1154;\n    const color = d3.scaleOrdinal(data.children.map(d => d.name), d3.schemeTableau10);\n    // Compute the layout.\n\n    const root = d3.treemap().tile(tile) // e.g., d3.treemapSquarify\n    .size([width, height]).padding(1).round(true)(d3.hierarchy(data).sum(d => d.value).sort((a, b) => b.value - a.value));\n\n    // Create the SVG container.\n    const svg = d3.create(\"svg\").attr(\"viewBox\", [0, 0, width, height]).attr(\"width\", width).attr(\"height\", height).attr(\"style\", \"max-width: 100%; height: auto; font: 10px sans-serif;\");\n\n    // Add a cell for each leaf of the hierarchy.\n    const leaf = svg.selectAll(\"g\").data(root.leaves()).join(\"g\").attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\n\n    // Append a tooltip.\n    const format = d3.format(\",d\");\n    leaf.append(\"title\").text(d => `${d.ancestors().reverse().map(d => d.data.name).join(\".\")}\\n${format(d.value)}`);\n\n    // Append a color rectangle. \n    leaf.append(\"rect\").attr(\"id\", d => (d.leafUid = DOM.uid(\"leaf\")).id).attr(\"fill\", d => {\n      while (d.depth > 1) d = d.parent;\n      return color(d.data.name);\n    }).attr(\"fill-opacity\", 0.6).attr(\"width\", d => d.x1 - d.x0).attr(\"height\", d => d.y1 - d.y0);\n\n    // Append a clipPath to ensure text does not overflow.\n    leaf.append(\"clipPath\").attr(\"id\", d => (d.clipUid = DOM.uid(\"clip\")).id).append(\"use\").attr(\"xlink:href\", d => d.leafUid.href);\n\n    // Append multiline text. The last line shows the value and has a specific formatting.\n    leaf.append(\"text\").attr(\"clip-path\", d => d.clipUid).selectAll(\"tspan\").data(d => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value))).join(\"tspan\").attr(\"x\", 3).attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`).attr(\"fill-opacity\", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null).text(d => d);\n  }, [data, dateRange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"tree-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphVisualization, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = GraphVisualization;\nexport default TreeMap;\n\n/*\r\nchart = {\r\n    // Specify the chart’s dimensions.\r\n    const width = 1154;\r\n    const height = 1154;\r\n  \r\n    // Specify the color scale.\r\n    const color = d3.scaleOrdinal(data.children.map(d => d.name), d3.schemeTableau10);\r\n  \r\n    // Compute the layout.\r\n    const root = d3.treemap()\r\n      .tile(tile) // e.g., d3.treemapSquarify\r\n      .size([width, height])\r\n      .padding(1)\r\n      .round(true)\r\n    (d3.hierarchy(data)\r\n        .sum(d => d.value)\r\n        .sort((a, b) => b.value - a.value));\r\n  \r\n    // Create the SVG container.\r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto; font: 10px sans-serif;\");\r\n  \r\n    // Add a cell for each leaf of the hierarchy.\r\n    const leaf = svg.selectAll(\"g\")\r\n      .data(root.leaves())\r\n      .join(\"g\")\r\n        .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n  \r\n    // Append a tooltip.\r\n    const format = d3.format(\",d\");\r\n    leaf.append(\"title\")\r\n        .text(d => `${d.ancestors().reverse().map(d => d.data.name).join(\".\")}\\n${format(d.value)}`);\r\n  \r\n    // Append a color rectangle. \r\n    leaf.append(\"rect\")\r\n        .attr(\"id\", d => (d.leafUid = DOM.uid(\"leaf\")).id)\r\n        .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\r\n        .attr(\"fill-opacity\", 0.6)\r\n        .attr(\"width\", d => d.x1 - d.x0)\r\n        .attr(\"height\", d => d.y1 - d.y0);\r\n  \r\n    // Append a clipPath to ensure text does not overflow.\r\n    leaf.append(\"clipPath\")\r\n        .attr(\"id\", d => (d.clipUid = DOM.uid(\"clip\")).id)\r\n      .append(\"use\")\r\n        .attr(\"xlink:href\", d => d.leafUid.href);\r\n  \r\n    // Append multiline text. The last line shows the value and has a specific formatting.\r\n    leaf.append(\"text\")\r\n        .attr(\"clip-path\", d => d.clipUid)\r\n      .selectAll(\"tspan\")\r\n      .data(d => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value)))\r\n      .join(\"tspan\")\r\n        .attr(\"x\", 3)\r\n        .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\r\n        .attr(\"fill-opacity\", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null)\r\n        .text(d => d);\r\n  \r\n    return Object.assign(svg.node(), {scales: {color}});\r\n  }\r\n*/\nvar _c, _c2;\n$RefreshReg$(_c, \"TreeMap\");\n$RefreshReg$(_c2, \"GraphVisualization\");","map":{"version":3,"names":["useEffect","useState","d3","data","jsxDEV","_jsxDEV","TreeMap","selectedGroups","children","fileName","_jsxFileName","lineNumber","columnNumber","GraphVisualization","_c","_s","select","remove","width","height","color","scaleOrdinal","map","d","name","schemeTableau10","root","treemap","tile","size","padding","round","hierarchy","sum","value","sort","a","b","svg","create","attr","leaf","selectAll","leaves","join","x0","y0","format","append","text","ancestors","reverse","leafUid","DOM","uid","id","depth","parent","x1","y1","clipUid","href","split","concat","i","nodes","length","dateRange","_c2","$RefreshReg$"],"sources":["C:/Jean/Scolarite/NUS/SoC/Data_vizualisation/Assignement_2/assignement2-app/src/Components/TreeMap.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport data from \"../assets/flare.json\";\r\n\r\n\r\nfunction TreeMap({ selectedGroups }) {\r\n    if (!data) return <p>Loading viz...</p>;\r\n  \r\n    return <GraphVisualization data={data} selectedGroups={selectedGroups} />;\r\n  }\r\n\r\n\r\nfunction GraphVisualization({ data, selectedGroups }) {\r\n  useEffect(() => {\r\n    d3.select(\"#tree-container\").select(\"svg\").remove();\r\n    const width = 1154;\r\n    const height = 1154;\r\n    const color = d3.scaleOrdinal(data.children.map(d => d.name), d3.schemeTableau10);\r\n    // Compute the layout.\r\n    \r\n    const root = d3.treemap()\r\n      .tile(tile) // e.g., d3.treemapSquarify\r\n      .size([width, height])\r\n      .padding(1)\r\n      .round(true)\r\n    (d3.hierarchy(data)\r\n        .sum(d => d.value)\r\n        .sort((a, b) => b.value - a.value));\r\n  \r\n    // Create the SVG container.\r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto; font: 10px sans-serif;\");\r\n  \r\n    // Add a cell for each leaf of the hierarchy.\r\n    const leaf = svg.selectAll(\"g\")\r\n      .data(root.leaves())\r\n      .join(\"g\")\r\n        .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n  \r\n    // Append a tooltip.\r\n    const format = d3.format(\",d\");\r\n    leaf.append(\"title\")\r\n        .text(d => `${d.ancestors().reverse().map(d => d.data.name).join(\".\")}\\n${format(d.value)}`);\r\n  \r\n    // Append a color rectangle. \r\n    leaf.append(\"rect\")\r\n        .attr(\"id\", d => (d.leafUid = DOM.uid(\"leaf\")).id)\r\n        .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\r\n        .attr(\"fill-opacity\", 0.6)\r\n        .attr(\"width\", d => d.x1 - d.x0)\r\n        .attr(\"height\", d => d.y1 - d.y0);\r\n  \r\n    // Append a clipPath to ensure text does not overflow.\r\n    leaf.append(\"clipPath\")\r\n        .attr(\"id\", d => (d.clipUid = DOM.uid(\"clip\")).id)\r\n      .append(\"use\")\r\n        .attr(\"xlink:href\", d => d.leafUid.href);\r\n  \r\n    // Append multiline text. The last line shows the value and has a specific formatting.\r\n    leaf.append(\"text\")\r\n        .attr(\"clip-path\", d => d.clipUid)\r\n      .selectAll(\"tspan\")\r\n      .data(d => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value)))\r\n      .join(\"tspan\")\r\n        .attr(\"x\", 3)\r\n        .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\r\n        .attr(\"fill-opacity\", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null)\r\n        .text(d => d);\r\n\r\n}, [data, dateRange]);\r\n\r\nreturn (\r\n    <div id=\"tree-container\"></div>\r\n);\r\n}\r\n\r\nexport default TreeMap;\r\n\r\n/*\r\nchart = {\r\n    // Specify the chart’s dimensions.\r\n    const width = 1154;\r\n    const height = 1154;\r\n  \r\n    // Specify the color scale.\r\n    const color = d3.scaleOrdinal(data.children.map(d => d.name), d3.schemeTableau10);\r\n  \r\n    // Compute the layout.\r\n    const root = d3.treemap()\r\n      .tile(tile) // e.g., d3.treemapSquarify\r\n      .size([width, height])\r\n      .padding(1)\r\n      .round(true)\r\n    (d3.hierarchy(data)\r\n        .sum(d => d.value)\r\n        .sort((a, b) => b.value - a.value));\r\n  \r\n    // Create the SVG container.\r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto; font: 10px sans-serif;\");\r\n  \r\n    // Add a cell for each leaf of the hierarchy.\r\n    const leaf = svg.selectAll(\"g\")\r\n      .data(root.leaves())\r\n      .join(\"g\")\r\n        .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n  \r\n    // Append a tooltip.\r\n    const format = d3.format(\",d\");\r\n    leaf.append(\"title\")\r\n        .text(d => `${d.ancestors().reverse().map(d => d.data.name).join(\".\")}\\n${format(d.value)}`);\r\n  \r\n    // Append a color rectangle. \r\n    leaf.append(\"rect\")\r\n        .attr(\"id\", d => (d.leafUid = DOM.uid(\"leaf\")).id)\r\n        .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\r\n        .attr(\"fill-opacity\", 0.6)\r\n        .attr(\"width\", d => d.x1 - d.x0)\r\n        .attr(\"height\", d => d.y1 - d.y0);\r\n  \r\n    // Append a clipPath to ensure text does not overflow.\r\n    leaf.append(\"clipPath\")\r\n        .attr(\"id\", d => (d.clipUid = DOM.uid(\"clip\")).id)\r\n      .append(\"use\")\r\n        .attr(\"xlink:href\", d => d.leafUid.href);\r\n  \r\n    // Append multiline text. The last line shows the value and has a specific formatting.\r\n    leaf.append(\"text\")\r\n        .attr(\"clip-path\", d => d.clipUid)\r\n      .selectAll(\"tspan\")\r\n      .data(d => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value)))\r\n      .join(\"tspan\")\r\n        .attr(\"x\", 3)\r\n        .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\r\n        .attr(\"fill-opacity\", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null)\r\n        .text(d => d);\r\n  \r\n    return Object.assign(svg.node(), {scales: {color}});\r\n  }\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}