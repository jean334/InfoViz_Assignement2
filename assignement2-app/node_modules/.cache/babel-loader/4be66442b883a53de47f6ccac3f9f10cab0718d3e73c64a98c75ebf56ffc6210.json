{"ast":null,"code":"var _jsxFileName = \"C:\\\\Jean\\\\Scolarite\\\\NUS\\\\SoC\\\\Data_vizualisation\\\\Assignement_2\\\\assignement2-app\\\\src\\\\Components\\\\BarRace.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport data from \"../assets/category-brands.csv\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateKeyframes = () => {\n  const data = [{\n    name: \"A\",\n    value: Math.random() * 100\n  }, {\n    name: \"B\",\n    value: Math.random() * 100\n  }, {\n    name: \"C\",\n    value: Math.random() * 100\n  }, {\n    name: \"D\",\n    value: Math.random() * 100\n  }];\n\n  // Simuler des keyframes (avec évolution aléatoire des valeurs)\n  const keyframes = Array.from({\n    length: 20\n  }, (_, i) => [`2025-03-${i + 1}`, data.map(d => ({\n    ...d,\n    value: d.value + Math.random() * 10,\n    rank: i % 4\n  }))]);\n  return keyframes;\n};\nconst BarRace = ({\n  duration = 250,\n  width = 800,\n  height = 600,\n  n = 12\n}) => {\n  _s();\n  const keyframes = generateKeyframes();\n  const svgRef = useRef();\n  const barSize = 48;\n  const marginTop = 16;\n  const marginBottom = 6;\n  const marginLeft = 0;\n  const marginRight = 6;\n\n  // Set scales\n  const x = d3.scaleLinear([0, 1], [marginLeft, width - marginRight]);\n  const y = d3.scaleBand().domain(d3.range(n + 1)).rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)]).padding(0.1);\n  const colorScale = d3.scaleOrdinal(d3.schemeTableau10);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.attr(\"viewBox\", [0, 0, width, height]).attr(\"width\", width).attr(\"height\", height);\n\n    // Append groups for bars and labels\n    const gBars = svg.append(\"g\").attr(\"fill-opacity\", 0.6);\n    const gLabels = svg.append(\"g\").attr(\"text-anchor\", \"end\");\n    const gTicker = svg.append(\"text\").attr(\"x\", width - 6).attr(\"y\", marginTop).style(\"font\", `bold ${barSize}px sans-serif`);\n    const updateBars = (data, transition) => {\n      const bars = gBars.selectAll(\"rect\").data(data, d => d.name);\n      bars.join(enter => enter.append(\"rect\").attr(\"fill\", d => colorScale(d.name)).attr(\"x\", x(0)).attr(\"y\", d => y(d.rank)).attr(\"width\", d => x(d.value) - x(0)).attr(\"height\", y.bandwidth()), update => update, exit => exit.transition(transition).attr(\"y\", d => y(d.rank)).attr(\"width\", d => x(d.value) - x(0)).remove()).call(bar => bar.transition(transition).attr(\"y\", d => y(d.rank)).attr(\"width\", d => x(d.value) - x(0)));\n    };\n    const updateLabels = (data, transition) => {\n      const labels = gLabels.selectAll(\"text\").data(data, d => d.name);\n      labels.join(enter => enter.append(\"text\").attr(\"x\", -6).attr(\"y\", d => y(d.rank)).attr(\"dy\", \"0.32em\").attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`).text(d => d.name), update => update, exit => exit.transition(transition).remove()).call(label => label.transition(transition).attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`));\n    };\n    const updateTicker = (date, transition) => {\n      gTicker.text(date).transition(transition);\n    };\n\n    // Animate keyframes\n    (async function animateChart() {\n      for (const [date, data] of keyframes) {\n        const transition = svg.transition().duration(duration).ease(d3.easeLinear);\n        x.domain([0, d3.max(data, d => d.value)]);\n        updateBars(data, transition);\n        updateLabels(data, transition);\n        updateTicker(date, transition);\n        await transition.end();\n      }\n    })();\n  }, [keyframes, duration, x, y, colorScale]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 10\n  }, this);\n};\n_s(BarRace, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = BarRace;\nexport default BarRace;\n\n/*\r\nchart = {\r\n    replay;\r\n  \r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto;\");\r\n  \r\n    const updateBars = bars(svg);\r\n    const updateAxis = axis(svg);\r\n    const updateLabels = labels(svg);\r\n    const updateTicker = ticker(svg);\r\n  \r\n    yield svg.node();\r\n  \r\n    for (const keyframe of keyframes) {\r\n      const transition = svg.transition()\r\n          .duration(duration)\r\n          .ease(d3.easeLinear);\r\n  \r\n      // Extract the top bar’s value.\r\n      x.domain([0, keyframe[1][0].value]);\r\n  \r\n      updateAxis(keyframe, transition);\r\n      updateBars(keyframe, transition);\r\n      updateLabels(keyframe, transition);\r\n      updateTicker(keyframe, transition);\r\n  \r\n      invalidation.then(() => svg.interrupt());\r\n      await transition.end();\r\n    }\r\n  }\r\n\r\nduration = 250\r\nn = 12\r\nnames = new Set(data.map(d => d.name))\r\ndatevalues = Array.from(d3.rollup(data, ([d]) => d.value, d => +d.date, d => d.name))\r\n.map(([date, data]) => [new Date(date), data])\r\n.sort(([a], [b]) => d3.ascending(a, b))\r\n\r\n\r\nfunction rank(value) {\r\nconst data = Array.from(names, name => ({name, value: value(name)}));\r\ndata.sort((a, b) => d3.descending(a.value, b.value));\r\nfor (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);\r\nreturn data;\r\n}\r\n\r\nk = 10\r\n\r\nkeyframes = {\r\nconst keyframes = [];\r\nlet ka, a, kb, b;\r\nfor ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\r\n    for (let i = 0; i < k; ++i) {\r\n    const t = i / k;\r\n    keyframes.push([\r\n        new Date(ka * (1 - t) + kb * t),\r\n        rank(name => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t)\r\n    ]);\r\n    }\r\n}\r\nkeyframes.push([new Date(kb), rank(name => b.get(name) || 0)]);\r\nreturn keyframes;\r\n}\r\n\r\nnameframes = d3.groups(keyframes.flatMap(([, data]) => data), d => d.name)\r\n\r\nprev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])))\r\n\r\nnext = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)))\r\n\r\nfunction bars(svg) {\r\nlet bar = svg.append(\"g\")\r\n    .attr(\"fill-opacity\", 0.6)\r\n    .selectAll(\"rect\");\r\n\r\nreturn ([date, data], transition) => bar = bar\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"rect\")\r\n        .attr(\"fill\", color)\r\n        .attr(\"height\", y.bandwidth())\r\n        .attr(\"x\", x(0))\r\n        .attr(\"y\", d => y((prev.get(d) || d).rank))\r\n        .attr(\"width\", d => x((prev.get(d) || d).value) - x(0)),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"y\", d => y((next.get(d) || d).rank))\r\n        .attr(\"width\", d => x((next.get(d) || d).value) - x(0))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"y\", d => y(d.rank))\r\n    .attr(\"width\", d => x(d.value) - x(0)));\r\n}\r\n\r\nfunction labels(svg) {\r\nlet label = svg.append(\"g\")\r\n    .style(\"font\", \"bold 12px var(--sans-serif)\")\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .selectAll(\"text\");\r\n\r\nreturn ([date, data], transition) => label = label\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"text\")\r\n        .attr(\"transform\", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)\r\n        .attr(\"y\", y.bandwidth() / 2)\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"-0.25em\")\r\n        .text(d => d.name)\r\n        .call(text => text.append(\"tspan\")\r\n        .attr(\"fill-opacity\", 0.7)\r\n        .attr(\"font-weight\", \"normal\")\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"1.15em\")),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"transform\", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)\r\n        .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.value, (next.get(d) || d).value)))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`)\r\n    .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).value, d.value))));\r\n}\r\n\r\nfunction textTween(a, b) {\r\nconst i = d3.interpolateNumber(a, b);\r\nreturn function(t) {\r\n    this.textContent = formatNumber(i(t));\r\n};\r\n}\r\n\r\nformatNumber = d3.format(\",d\")\r\n\r\ntickFormat = undefined // override as desired\r\n\r\nfunction axis(svg) {\r\nconst g = svg.append(\"g\")\r\n    .attr(\"transform\", `translate(0,${marginTop})`);\r\n\r\nconst axis = d3.axisTop(x)\r\n    .ticks(width / 160, tickFormat)\r\n    .tickSizeOuter(0)\r\n    .tickSizeInner(-barSize * (n + y.padding()));\r\n\r\nreturn (_, transition) => {\r\n    g.transition(transition).call(axis);\r\n    g.select(\".tick:first-of-type text\").remove();\r\n    g.selectAll(\".tick:not(:first-of-type) line\").attr(\"stroke\", \"white\");\r\n    g.select(\".domain\").remove();\r\n};\r\n}\r\n\r\nfunction ticker(svg) {\r\nconst now = svg.append(\"text\")\r\n    .style(\"font\", `bold ${barSize}px var(--sans-serif)`)\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"x\", width - 6)\r\n    .attr(\"y\", marginTop + barSize * (n - 0.45))\r\n    .attr(\"dy\", \"0.32em\")\r\n    .text(formatDate(keyframes[0][0]));\r\n\r\nreturn ([date], transition) => {\r\n    transition.end().then(() => now.text(formatDate(date)));\r\n};\r\n}\r\n\r\nformatDate = d3.utcFormat(\"%Y\")\r\n\r\ncolor = {\r\n    const scale = d3.scaleOrdinal(d3.schemeTableau10);\r\n    if (data.some(d => d.category !== undefined)) {\r\n        const categoryByName = new Map(data.map(d => [d.name, d.category]))\r\n        scale.domain(categoryByName.values());\r\n        return d => scale(categoryByName.get(d.name));\r\n    }\r\n    return d => scale(d.name);\r\n}\r\n\r\nx = d3.scaleLinear([0, 1], [marginLeft, width - marginRight])\r\n\r\ny = d3.scaleBand()\r\n.domain(d3.range(n + 1))\r\n.rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)])\r\n.padding(0.1)\r\n\r\nheight = marginTop + barSize * n + marginBottom\r\n\r\nbarSize = 48\r\nmarginTop = 16\r\nmarginRight = 6\r\nmarginBottom = 6\r\nmarginLeft = 0\r\n*/\nvar _c;\n$RefreshReg$(_c, \"BarRace\");","map":{"version":3,"names":["React","useEffect","useRef","data","d3","jsxDEV","_jsxDEV","generateKeyframes","name","value","Math","random","keyframes","Array","from","length","_","i","map","d","rank","BarRace","duration","width","height","n","_s","svgRef","barSize","marginTop","marginBottom","marginLeft","marginRight","x","scaleLinear","y","scaleBand","domain","range","rangeRound","padding","colorScale","scaleOrdinal","schemeTableau10","svg","select","current","attr","gBars","append","gLabels","gTicker","style","updateBars","transition","bars","selectAll","join","enter","bandwidth","update","exit","remove","call","bar","updateLabels","labels","text","label","updateTicker","date","animateChart","ease","easeLinear","max","end","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Jean/Scolarite/NUS/SoC/Data_vizualisation/Assignement_2/assignement2-app/src/Components/BarRace.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport data from \"../assets/category-brands.csv\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst generateKeyframes = () => {\r\n    const data = [\r\n      { name: \"A\", value: Math.random() * 100 },\r\n      { name: \"B\", value: Math.random() * 100 },\r\n      { name: \"C\", value: Math.random() * 100 },\r\n      { name: \"D\", value: Math.random() * 100 },\r\n    ];\r\n  \r\n    // Simuler des keyframes (avec évolution aléatoire des valeurs)\r\n    const keyframes = Array.from({ length: 20 }, (_, i) => [\r\n      `2025-03-${i + 1}`,\r\n      data.map((d) => ({ ...d, value: d.value + Math.random() * 10, rank: i % 4 })),\r\n    ]);\r\n  \r\n    return keyframes;\r\n  };\r\n\r\n\r\n\r\nconst BarRace = ({duration = 250, width = 800, height = 600, n = 12 }) => {\r\n  const keyframes = generateKeyframes();\r\n  const svgRef = useRef();\r\n  const barSize = 48;\r\n  const marginTop = 16;\r\n  const marginBottom = 6;\r\n  const marginLeft = 0;\r\n  const marginRight = 6;\r\n\r\n  // Set scales\r\n  const x = d3.scaleLinear([0, 1], [marginLeft, width - marginRight]);\r\n  const y = d3\r\n    .scaleBand()\r\n    .domain(d3.range(n + 1))\r\n    .rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)])\r\n    .padding(0.1);\r\n\r\n  const colorScale = d3.scaleOrdinal(d3.schemeTableau10);\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg\r\n      .attr(\"viewBox\", [0, 0, width, height])\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height);\r\n\r\n    // Append groups for bars and labels\r\n    const gBars = svg.append(\"g\").attr(\"fill-opacity\", 0.6);\r\n    const gLabels = svg.append(\"g\").attr(\"text-anchor\", \"end\");\r\n    const gTicker = svg.append(\"text\").attr(\"x\", width - 6).attr(\"y\", marginTop).style(\"font\", `bold ${barSize}px sans-serif`);\r\n\r\n    const updateBars = (data, transition) => {\r\n      const bars = gBars.selectAll(\"rect\").data(data, (d) => d.name);\r\n\r\n      bars\r\n        .join(\r\n          (enter) =>\r\n            enter\r\n              .append(\"rect\")\r\n              .attr(\"fill\", (d) => colorScale(d.name))\r\n              .attr(\"x\", x(0))\r\n              .attr(\"y\", (d) => y(d.rank))\r\n              .attr(\"width\", (d) => x(d.value) - x(0))\r\n              .attr(\"height\", y.bandwidth()),\r\n          (update) => update,\r\n          (exit) =>\r\n            exit\r\n              .transition(transition)\r\n              .attr(\"y\", (d) => y(d.rank))\r\n              .attr(\"width\", (d) => x(d.value) - x(0))\r\n              .remove()\r\n        )\r\n        .call((bar) =>\r\n          bar\r\n            .transition(transition)\r\n            .attr(\"y\", (d) => y(d.rank))\r\n            .attr(\"width\", (d) => x(d.value) - x(0))\r\n        );\r\n    };\r\n\r\n    const updateLabels = (data, transition) => {\r\n      const labels = gLabels.selectAll(\"text\").data(data, (d) => d.name);\r\n\r\n      labels\r\n        .join(\r\n          (enter) =>\r\n            enter\r\n              .append(\"text\")\r\n              .attr(\"x\", -6)\r\n              .attr(\"y\", (d) => y(d.rank))\r\n              .attr(\"dy\", \"0.32em\")\r\n              .attr(\"transform\", (d) => `translate(${x(d.value)},${y(d.rank)})`)\r\n              .text((d) => d.name),\r\n          (update) => update,\r\n          (exit) => exit.transition(transition).remove()\r\n        )\r\n        .call((label) =>\r\n          label\r\n            .transition(transition)\r\n            .attr(\"transform\", (d) => `translate(${x(d.value)},${y(d.rank)})`)\r\n        );\r\n    };\r\n\r\n    const updateTicker = (date, transition) => {\r\n      gTicker.text(date).transition(transition);\r\n    };\r\n\r\n    // Animate keyframes\r\n    (async function animateChart() {\r\n      for (const [date, data] of keyframes) {\r\n        const transition = svg.transition().duration(duration).ease(d3.easeLinear);\r\n\r\n        x.domain([0, d3.max(data, (d) => d.value)]);\r\n\r\n        updateBars(data, transition);\r\n        updateLabels(data, transition);\r\n        updateTicker(date, transition);\r\n\r\n        await transition.end();\r\n      }\r\n    })();\r\n  }, [keyframes, duration, x, y, colorScale]);\r\n\r\n  return <svg ref={svgRef} />;\r\n};\r\n\r\nexport default BarRace;\r\n\r\n\r\n/*\r\nchart = {\r\n    replay;\r\n  \r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto;\");\r\n  \r\n    const updateBars = bars(svg);\r\n    const updateAxis = axis(svg);\r\n    const updateLabels = labels(svg);\r\n    const updateTicker = ticker(svg);\r\n  \r\n    yield svg.node();\r\n  \r\n    for (const keyframe of keyframes) {\r\n      const transition = svg.transition()\r\n          .duration(duration)\r\n          .ease(d3.easeLinear);\r\n  \r\n      // Extract the top bar’s value.\r\n      x.domain([0, keyframe[1][0].value]);\r\n  \r\n      updateAxis(keyframe, transition);\r\n      updateBars(keyframe, transition);\r\n      updateLabels(keyframe, transition);\r\n      updateTicker(keyframe, transition);\r\n  \r\n      invalidation.then(() => svg.interrupt());\r\n      await transition.end();\r\n    }\r\n  }\r\n\r\nduration = 250\r\nn = 12\r\nnames = new Set(data.map(d => d.name))\r\ndatevalues = Array.from(d3.rollup(data, ([d]) => d.value, d => +d.date, d => d.name))\r\n.map(([date, data]) => [new Date(date), data])\r\n.sort(([a], [b]) => d3.ascending(a, b))\r\n\r\n\r\nfunction rank(value) {\r\nconst data = Array.from(names, name => ({name, value: value(name)}));\r\ndata.sort((a, b) => d3.descending(a.value, b.value));\r\nfor (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);\r\nreturn data;\r\n}\r\n\r\nk = 10\r\n\r\nkeyframes = {\r\nconst keyframes = [];\r\nlet ka, a, kb, b;\r\nfor ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\r\n    for (let i = 0; i < k; ++i) {\r\n    const t = i / k;\r\n    keyframes.push([\r\n        new Date(ka * (1 - t) + kb * t),\r\n        rank(name => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t)\r\n    ]);\r\n    }\r\n}\r\nkeyframes.push([new Date(kb), rank(name => b.get(name) || 0)]);\r\nreturn keyframes;\r\n}\r\n\r\nnameframes = d3.groups(keyframes.flatMap(([, data]) => data), d => d.name)\r\n\r\nprev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])))\r\n\r\nnext = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)))\r\n\r\nfunction bars(svg) {\r\nlet bar = svg.append(\"g\")\r\n    .attr(\"fill-opacity\", 0.6)\r\n    .selectAll(\"rect\");\r\n\r\nreturn ([date, data], transition) => bar = bar\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"rect\")\r\n        .attr(\"fill\", color)\r\n        .attr(\"height\", y.bandwidth())\r\n        .attr(\"x\", x(0))\r\n        .attr(\"y\", d => y((prev.get(d) || d).rank))\r\n        .attr(\"width\", d => x((prev.get(d) || d).value) - x(0)),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"y\", d => y((next.get(d) || d).rank))\r\n        .attr(\"width\", d => x((next.get(d) || d).value) - x(0))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"y\", d => y(d.rank))\r\n    .attr(\"width\", d => x(d.value) - x(0)));\r\n}\r\n\r\nfunction labels(svg) {\r\nlet label = svg.append(\"g\")\r\n    .style(\"font\", \"bold 12px var(--sans-serif)\")\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .selectAll(\"text\");\r\n\r\nreturn ([date, data], transition) => label = label\r\n    .data(data.slice(0, n), d => d.name)\r\n    .join(\r\n    enter => enter.append(\"text\")\r\n        .attr(\"transform\", d => `translate(${x((prev.get(d) || d).value)},${y((prev.get(d) || d).rank)})`)\r\n        .attr(\"y\", y.bandwidth() / 2)\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"-0.25em\")\r\n        .text(d => d.name)\r\n        .call(text => text.append(\"tspan\")\r\n        .attr(\"fill-opacity\", 0.7)\r\n        .attr(\"font-weight\", \"normal\")\r\n        .attr(\"x\", -6)\r\n        .attr(\"dy\", \"1.15em\")),\r\n    update => update,\r\n    exit => exit.transition(transition).remove()\r\n        .attr(\"transform\", d => `translate(${x((next.get(d) || d).value)},${y((next.get(d) || d).rank)})`)\r\n        .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.value, (next.get(d) || d).value)))\r\n    )\r\n    .call(bar => bar.transition(transition)\r\n    .attr(\"transform\", d => `translate(${x(d.value)},${y(d.rank)})`)\r\n    .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).value, d.value))));\r\n}\r\n\r\nfunction textTween(a, b) {\r\nconst i = d3.interpolateNumber(a, b);\r\nreturn function(t) {\r\n    this.textContent = formatNumber(i(t));\r\n};\r\n}\r\n\r\nformatNumber = d3.format(\",d\")\r\n\r\ntickFormat = undefined // override as desired\r\n\r\nfunction axis(svg) {\r\nconst g = svg.append(\"g\")\r\n    .attr(\"transform\", `translate(0,${marginTop})`);\r\n\r\nconst axis = d3.axisTop(x)\r\n    .ticks(width / 160, tickFormat)\r\n    .tickSizeOuter(0)\r\n    .tickSizeInner(-barSize * (n + y.padding()));\r\n\r\nreturn (_, transition) => {\r\n    g.transition(transition).call(axis);\r\n    g.select(\".tick:first-of-type text\").remove();\r\n    g.selectAll(\".tick:not(:first-of-type) line\").attr(\"stroke\", \"white\");\r\n    g.select(\".domain\").remove();\r\n};\r\n}\r\n\r\nfunction ticker(svg) {\r\nconst now = svg.append(\"text\")\r\n    .style(\"font\", `bold ${barSize}px var(--sans-serif)`)\r\n    .style(\"font-variant-numeric\", \"tabular-nums\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"x\", width - 6)\r\n    .attr(\"y\", marginTop + barSize * (n - 0.45))\r\n    .attr(\"dy\", \"0.32em\")\r\n    .text(formatDate(keyframes[0][0]));\r\n\r\nreturn ([date], transition) => {\r\n    transition.end().then(() => now.text(formatDate(date)));\r\n};\r\n}\r\n\r\nformatDate = d3.utcFormat(\"%Y\")\r\n\r\ncolor = {\r\n    const scale = d3.scaleOrdinal(d3.schemeTableau10);\r\n    if (data.some(d => d.category !== undefined)) {\r\n        const categoryByName = new Map(data.map(d => [d.name, d.category]))\r\n        scale.domain(categoryByName.values());\r\n        return d => scale(categoryByName.get(d.name));\r\n    }\r\n    return d => scale(d.name);\r\n}\r\n\r\nx = d3.scaleLinear([0, 1], [marginLeft, width - marginRight])\r\n\r\ny = d3.scaleBand()\r\n.domain(d3.range(n + 1))\r\n.rangeRound([marginTop, marginTop + barSize * (n + 1 + 0.1)])\r\n.padding(0.1)\r\n\r\nheight = marginTop + barSize * n + marginBottom\r\n\r\nbarSize = 48\r\nmarginTop = 16\r\nmarginRight = 6\r\nmarginBottom = 6\r\nmarginLeft = 0\r\n*/\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}