{"ast":null,"code":"var _jsxFileName = \"C:\\\\Jean\\\\Scolarite\\\\NUS\\\\SoC\\\\Data_vizualisation\\\\Assignement_2\\\\assignement2-app\\\\src\\\\Components\\\\TreeMap.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport data from \"../assets/flare.json\";\n\n/*\r\nfunction TreeMap(){//{ selectedGroups }) {\r\n    if (!data) return <p>Loading viz...</p>;\r\n  \r\n    return <GraphVisualization/>; //data={data} selectedGroups={selectedGroups} />;\r\n  }\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Treemap = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  const width = 1154;\n  const height = 1154;\n  useEffect(() => {\n    if (!data) return;\n\n    // Clear previous SVG content\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    // Define color scale\n    const color = d3.scaleOrdinal(data.children.map(d => d.name), d3.schemeTableau10);\n\n    // Compute the treemap layout\n    const root = d3.treemap().tile(d3.treemapSquarify).size([width, height]).padding(1).round(true)(d3.hierarchy(data).sum(d => d.value).sort((a, b) => b.value - a.value));\n\n    // Create SVG and group element for each leaf\n    const svg = d3.select(svgRef.current).attr(\"viewBox\", `0 0 ${width} ${height}`).style(\"font\", \"10px sans-serif\");\n    const leaf = svg.selectAll(\"g\").data(root.leaves()).join(\"g\").attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\n\n    // Append tooltip\n    const format = d3.format(\",d\");\n    leaf.append(\"title\").text(d => `${d.ancestors().reverse().map(d => d.data.name).join(\".\")}\\n${format(d.value)}`);\n\n    // Append colored rectangles\n    leaf.append(\"rect\").attr(\"fill\", d => {\n      while (d.depth > 1) d = d.parent;\n      return color(d.data.name);\n    }).attr(\"fill-opacity\", 0.6).attr(\"width\", d => d.x1 - d.x0).attr(\"height\", d => d.y1 - d.y0);\n\n    // Append text inside each rectangle\n    leaf.append(\"text\").selectAll(\"tspan\").data(d => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value))).join(\"tspan\").attr(\"x\", 3).attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`).attr(\"fill-opacity\", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null).text(d => d);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: \"100%\",\n    height: \"100%\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 8\n  }, this);\n};\n_s(Treemap, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Treemap;\nexport default Treemap;\n\n/*\r\nfunction GraphVisualization(){//{ data, selectedGroups }) {\r\n    //const svgRef = useRef(null);\r\n    const width = 1154;\r\n    const height = 1154;\r\n\r\n    useEffect(() => {\r\n        //if (!data) return;\r\n        d3.select(\"#treemap-container\").select(\"svg\").remove();\r\n    \r\n        // Define color scale\r\n        const color = d3.scaleOrdinal(data.children.map((d) => d.name), d3.schemeTableau10);\r\n    \r\n        // Compute the treemap layout\r\n        const root = d3.treemap()\r\n        .tile(d3.treemapSquarify)\r\n        .size([width, height])\r\n        .padding(1)\r\n        .round(true)(\r\n            d3.hierarchy(data)\r\n            .sum((d) => d.value)\r\n            .sort((a, b) => b.value - a.value)\r\n        );\r\n    \r\n        // Create SVG and group element for each leaf\r\n        const svg = d3.select(\"#treemap-container\")\r\n        .append(\"svg\")\r\n        .attr(\"viewBox\", `0 0 ${width} ${height}`)\r\n        .style(\"font\", \"10px sans-serif\");\r\n\r\n        const leaf = svg.selectAll(\"g\")\r\n        .data(root.leaves())\r\n        .join(\"g\")\r\n        .attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\r\n    \r\n        // Append tooltip\r\n        const format = d3.format(\",d\");\r\n        leaf.append(\"title\").text((d) =>\r\n        `${d.ancestors().reverse().map((d) => d.data.name).join(\".\")}\\n${format(d.value)}`\r\n        );\r\n    \r\n        // Append colored rectangles\r\n        leaf.append(\"rect\")\r\n        .attr(\"fill\", (d) => {\r\n            while (d.depth > 1) d = d.parent;\r\n            return color(d.data.name);\r\n        })\r\n        .attr(\"fill-opacity\", 0.6)\r\n        .attr(\"width\", (d) => d.x1 - d.x0)\r\n        .attr(\"height\", (d) => d.y1 - d.y0);\r\n    \r\n        // Append text inside each rectangle\r\n        leaf.append(\"text\")\r\n        .selectAll(\"tspan\")\r\n        .data((d) => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value)))\r\n        .join(\"tspan\")\r\n        .attr(\"x\", 3)\r\n        .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\r\n        .attr(\"fill-opacity\", (d, i, nodes) => (i === nodes.length - 1 ? 0.7 : null))\r\n        .text((d) => d);\r\n\r\n        console.log(\"leaf\", leaf);\r\n    \r\n    }, [data]);\r\n    \r\n    return <div id=\"tree-container\"></div>;\r\n    };\r\n    \r\n\r\nexport default TreeMap;\r\n\r\n/*\r\nchart = {\r\n    // Specify the chartâ€™s dimensions.\r\n    const width = 1154;\r\n    const height = 1154;\r\n  \r\n    // Specify the color scale.\r\n    const color = d3.scaleOrdinal(data.children.map(d => d.name), d3.schemeTableau10);\r\n  \r\n    // Compute the layout.\r\n    const root = d3.treemap()\r\n      .tile(tile) // e.g., d3.treemapSquarify\r\n      .size([width, height])\r\n      .padding(1)\r\n      .round(true)\r\n    (d3.hierarchy(data)\r\n        .sum(d => d.value)\r\n        .sort((a, b) => b.value - a.value));\r\n  \r\n    // Create the SVG container.\r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto; font: 10px sans-serif;\");\r\n  \r\n    // Add a cell for each leaf of the hierarchy.\r\n    const leaf = svg.selectAll(\"g\")\r\n      .data(root.leaves())\r\n      .join(\"g\")\r\n        .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n  \r\n    // Append a tooltip.\r\n    const format = d3.format(\",d\");\r\n    leaf.append(\"title\")\r\n        .text(d => `${d.ancestors().reverse().map(d => d.data.name).join(\".\")}\\n${format(d.value)}`);\r\n  \r\n    // Append a color rectangle. \r\n    leaf.append(\"rect\")\r\n        .attr(\"id\", d => (d.leafUid = DOM.uid(\"leaf\")).id)\r\n        .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\r\n        .attr(\"fill-opacity\", 0.6)\r\n        .attr(\"width\", d => d.x1 - d.x0)\r\n        .attr(\"height\", d => d.y1 - d.y0);\r\n  \r\n    // Append a clipPath to ensure text does not overflow.\r\n    leaf.append(\"clipPath\")\r\n        .attr(\"id\", d => (d.clipUid = DOM.uid(\"clip\")).id)\r\n      .append(\"use\")\r\n        .attr(\"xlink:href\", d => d.leafUid.href);\r\n  \r\n    // Append multiline text. The last line shows the value and has a specific formatting.\r\n    leaf.append(\"text\")\r\n        .attr(\"clip-path\", d => d.clipUid)\r\n      .selectAll(\"tspan\")\r\n      .data(d => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value)))\r\n      .join(\"tspan\")\r\n        .attr(\"x\", 3)\r\n        .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\r\n        .attr(\"fill-opacity\", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null)\r\n        .text(d => d);\r\n  \r\n    return Object.assign(svg.node(), {scales: {color}});\r\n  }\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Treemap\");","map":{"version":3,"names":["useEffect","useState","useRef","d3","data","jsxDEV","_jsxDEV","Treemap","_s","svgRef","width","height","select","current","selectAll","remove","color","scaleOrdinal","children","map","d","name","schemeTableau10","root","treemap","tile","treemapSquarify","size","padding","round","hierarchy","sum","value","sort","a","b","svg","attr","style","leaf","leaves","join","x0","y0","format","append","text","ancestors","reverse","depth","parent","x1","y1","split","concat","i","nodes","length","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Jean/Scolarite/NUS/SoC/Data_vizualisation/Assignement_2/assignement2-app/src/Components/TreeMap.jsx"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport data from \"../assets/flare.json\";\r\n\r\n/*\r\nfunction TreeMap(){//{ selectedGroups }) {\r\n    if (!data) return <p>Loading viz...</p>;\r\n  \r\n    return <GraphVisualization/>; //data={data} selectedGroups={selectedGroups} />;\r\n  }\r\n*/\r\nconst Treemap = ({ data }) => {\r\nconst svgRef = useRef(null);\r\nconst width = 1154;\r\nconst height = 1154;\r\n\r\nuseEffect(() => {\r\n    if (!data) return;\r\n\r\n    // Clear previous SVG content\r\n    d3.select(svgRef.current).selectAll(\"*\").remove();\r\n\r\n    // Define color scale\r\n    const color = d3.scaleOrdinal(data.children.map((d) => d.name), d3.schemeTableau10);\r\n\r\n    // Compute the treemap layout\r\n    const root = d3.treemap()\r\n    .tile(d3.treemapSquarify)\r\n    .size([width, height])\r\n    .padding(1)\r\n    .round(true)(\r\n        d3.hierarchy(data)\r\n        .sum((d) => d.value)\r\n        .sort((a, b) => b.value - a.value)\r\n    );\r\n\r\n    // Create SVG and group element for each leaf\r\n    const svg = d3.select(svgRef.current)\r\n    .attr(\"viewBox\", `0 0 ${width} ${height}`)\r\n    .style(\"font\", \"10px sans-serif\");\r\n\r\n    const leaf = svg.selectAll(\"g\")\r\n    .data(root.leaves())\r\n    .join(\"g\")\r\n    .attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\r\n\r\n    // Append tooltip\r\n    const format = d3.format(\",d\");\r\n    leaf.append(\"title\").text((d) =>\r\n    `${d.ancestors().reverse().map((d) => d.data.name).join(\".\")}\\n${format(d.value)}`\r\n    );\r\n\r\n    // Append colored rectangles\r\n    leaf.append(\"rect\")\r\n    .attr(\"fill\", (d) => {\r\n        while (d.depth > 1) d = d.parent;\r\n        return color(d.data.name);\r\n    })\r\n    .attr(\"fill-opacity\", 0.6)\r\n    .attr(\"width\", (d) => d.x1 - d.x0)\r\n    .attr(\"height\", (d) => d.y1 - d.y0);\r\n\r\n    // Append text inside each rectangle\r\n    leaf.append(\"text\")\r\n    .selectAll(\"tspan\")\r\n    .data((d) => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value)))\r\n    .join(\"tspan\")\r\n    .attr(\"x\", 3)\r\n    .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\r\n    .attr(\"fill-opacity\", (d, i, nodes) => (i === nodes.length - 1 ? 0.7 : null))\r\n    .text((d) => d);\r\n\r\n}, [data]);\r\n\r\nreturn <svg ref={svgRef} width=\"100%\" height=\"100%\" />;\r\n};\r\n\r\nexport default Treemap;\r\n\r\n\r\n/*\r\nfunction GraphVisualization(){//{ data, selectedGroups }) {\r\n    //const svgRef = useRef(null);\r\n    const width = 1154;\r\n    const height = 1154;\r\n\r\n    useEffect(() => {\r\n        //if (!data) return;\r\n        d3.select(\"#treemap-container\").select(\"svg\").remove();\r\n    \r\n        // Define color scale\r\n        const color = d3.scaleOrdinal(data.children.map((d) => d.name), d3.schemeTableau10);\r\n    \r\n        // Compute the treemap layout\r\n        const root = d3.treemap()\r\n        .tile(d3.treemapSquarify)\r\n        .size([width, height])\r\n        .padding(1)\r\n        .round(true)(\r\n            d3.hierarchy(data)\r\n            .sum((d) => d.value)\r\n            .sort((a, b) => b.value - a.value)\r\n        );\r\n    \r\n        // Create SVG and group element for each leaf\r\n        const svg = d3.select(\"#treemap-container\")\r\n        .append(\"svg\")\r\n        .attr(\"viewBox\", `0 0 ${width} ${height}`)\r\n        .style(\"font\", \"10px sans-serif\");\r\n\r\n        const leaf = svg.selectAll(\"g\")\r\n        .data(root.leaves())\r\n        .join(\"g\")\r\n        .attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\r\n    \r\n        // Append tooltip\r\n        const format = d3.format(\",d\");\r\n        leaf.append(\"title\").text((d) =>\r\n        `${d.ancestors().reverse().map((d) => d.data.name).join(\".\")}\\n${format(d.value)}`\r\n        );\r\n    \r\n        // Append colored rectangles\r\n        leaf.append(\"rect\")\r\n        .attr(\"fill\", (d) => {\r\n            while (d.depth > 1) d = d.parent;\r\n            return color(d.data.name);\r\n        })\r\n        .attr(\"fill-opacity\", 0.6)\r\n        .attr(\"width\", (d) => d.x1 - d.x0)\r\n        .attr(\"height\", (d) => d.y1 - d.y0);\r\n    \r\n        // Append text inside each rectangle\r\n        leaf.append(\"text\")\r\n        .selectAll(\"tspan\")\r\n        .data((d) => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value)))\r\n        .join(\"tspan\")\r\n        .attr(\"x\", 3)\r\n        .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\r\n        .attr(\"fill-opacity\", (d, i, nodes) => (i === nodes.length - 1 ? 0.7 : null))\r\n        .text((d) => d);\r\n\r\n        console.log(\"leaf\", leaf);\r\n    \r\n    }, [data]);\r\n    \r\n    return <div id=\"tree-container\"></div>;\r\n    };\r\n    \r\n\r\nexport default TreeMap;\r\n\r\n/*\r\nchart = {\r\n    // Specify the chartâ€™s dimensions.\r\n    const width = 1154;\r\n    const height = 1154;\r\n  \r\n    // Specify the color scale.\r\n    const color = d3.scaleOrdinal(data.children.map(d => d.name), d3.schemeTableau10);\r\n  \r\n    // Compute the layout.\r\n    const root = d3.treemap()\r\n      .tile(tile) // e.g., d3.treemapSquarify\r\n      .size([width, height])\r\n      .padding(1)\r\n      .round(true)\r\n    (d3.hierarchy(data)\r\n        .sum(d => d.value)\r\n        .sort((a, b) => b.value - a.value));\r\n  \r\n    // Create the SVG container.\r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"viewBox\", [0, 0, width, height])\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"style\", \"max-width: 100%; height: auto; font: 10px sans-serif;\");\r\n  \r\n    // Add a cell for each leaf of the hierarchy.\r\n    const leaf = svg.selectAll(\"g\")\r\n      .data(root.leaves())\r\n      .join(\"g\")\r\n        .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n  \r\n    // Append a tooltip.\r\n    const format = d3.format(\",d\");\r\n    leaf.append(\"title\")\r\n        .text(d => `${d.ancestors().reverse().map(d => d.data.name).join(\".\")}\\n${format(d.value)}`);\r\n  \r\n    // Append a color rectangle. \r\n    leaf.append(\"rect\")\r\n        .attr(\"id\", d => (d.leafUid = DOM.uid(\"leaf\")).id)\r\n        .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\r\n        .attr(\"fill-opacity\", 0.6)\r\n        .attr(\"width\", d => d.x1 - d.x0)\r\n        .attr(\"height\", d => d.y1 - d.y0);\r\n  \r\n    // Append a clipPath to ensure text does not overflow.\r\n    leaf.append(\"clipPath\")\r\n        .attr(\"id\", d => (d.clipUid = DOM.uid(\"clip\")).id)\r\n      .append(\"use\")\r\n        .attr(\"xlink:href\", d => d.leafUid.href);\r\n  \r\n    // Append multiline text. The last line shows the value and has a specific formatting.\r\n    leaf.append(\"text\")\r\n        .attr(\"clip-path\", d => d.clipUid)\r\n      .selectAll(\"tspan\")\r\n      .data(d => d.data.name.split(/(?=[A-Z][a-z])|\\s+/g).concat(format(d.value)))\r\n      .join(\"tspan\")\r\n        .attr(\"x\", 3)\r\n        .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\r\n        .attr(\"fill-opacity\", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null)\r\n        .text(d => d);\r\n  \r\n    return Object.assign(svg.node(), {scales: {color}});\r\n  }\r\n*/"],"mappings":"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7ES,IAAI,CAAC,OAAO,CAAC,CACbJ,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,GAAG,EAAE,CAACjB,CAAC,EAAEmC,CAAC,EAAEC,KAAK,KAAK,GAAG,CAACD,CAAC,KAAKC,KAAK,CAACC,MAAM,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,GAAGF,CAAC,GAAG,GAAG,IAAI,CAAC,CACjFlB,IAAI,CAAC,cAAc,EAAE,CAACjB,CAAC,EAAEmC,CAAC,EAAEC,KAAK,KAAMD,CAAC,KAAKC,KAAK,CAACC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,IAAK,CAAC,CAC5EX,IAAI,CAAE1B,CAAC,IAAKA,CAAC,CAAC;EAEnB,CAAC,EAAE,CAAChB,IAAI,CAAC,CAAC;EAEV,oBAAOE,OAAA;IAAKoD,GAAG,EAAEjD,MAAO;IAACC,KAAK,EAAC,MAAM;IAACC,MAAM,EAAC;EAAM;IAAAgD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtD,CAAC;AAACtD,EAAA,CAhEID,OAAO;AAAAwD,EAAA,GAAPxD,OAAO;AAkEb,eAAeA,OAAO;;AAGtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvIA,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}